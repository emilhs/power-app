[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(epiR)\nlibrary(ggplot2)\nlibrary(pwr)\n\npair_p <- function(myn, b, a, mean, sd) power.t.test(n = myn, delta = mean/sd, power = NULL, sig.level = 1-a/2)$power\npair_n <- function(myn, b, a, mean, sd) power.t.test(n = NULL, delta = mean/sd, power = b, sig.level = 1-a/2)$n\n\nprop_p <- function(myn, b, a, prop1, prop2) power.prop.test(n = myn, p1 = prop1, p2 = prop2, power = NULL, sig.level = 1-a/2)$power\nprop_n <- function(myn, b, a, prop1, prop2) power.prop.test(n = NULL, p1 = prop1, p2 = prop2, power = b, sig.level = 1-a/2)$n\n\ncohort_p <- function(myn, b, a, ccr, ep, rr) epi.sscohortc(irexp0 = ep, irexp1 = ep*rr, r = 1/ccr, n = myn*(ccr+1), power = NA, conf.level = a)$power\ncohort_n <- function(myn, b, a, ccr, ep, rr) epi.sscohortc(irexp0 = ep, irexp1 = ep*rr, r = 1/ccr, n = NA, power = b, conf.level = a)$n.exp1\n\ncase_p <- function(myn, b, a, ccr, ep, rr) epi.sscc(p0 = ep, p1 = ep*rr, OR = rr, r = ccr, n = myn*(ccr+1), power = NA, conf.level = a)$power\ncase_n <- function(myn, b, a, ccr, ep, rr) epi.sscc(p0 = ep, p1 = ep*rr, OR = rr, r = ccr, n = NA, power = b, conf.level = a)$n.case\n\nadj_table <- function(df){\n  adj <- df %>% mutate(max = as.numeric(rownames(df))) %>% pivot_longer(cols = -max, names_to = \"variable\", values_to = \"val\")\n  return(as.data.frame(adj))\n}\n\nchoices1 <- c(\"I want to determine power\", \"I want to determine sample size\")\nchoices2 <- c(\"continuous data (ex. height, body temperature).\", \"discrete data (ex. TRUE/FALSE, exposed/susceptible).\")\nchoices3 <- c(\"Paired (Related)\", \"Independent\")\nchoices4 <- c(\"I have the proportion of a population\", \"I want to determine cohort-power\", \"I want to determine case-control power\")\n\n# Define UI for application that draws a histogram\nui <- page_sidebar(\n  title = \"Multi-Purpose Power and Sample Size Calculator\",\n  # SETUP\n  sidebar = sidebar(\n    radioButtons(\"type1\", \"Which of the following describes your objective:\", choices1),\n    radioButtons(\"type2\", \"for...\", choices2),\n    uiOutput(\"select3\")\n  ),\n  # DATA ENTRY\n  card(uiOutput(\"requirements\")),\n  # RESULTS\n  navset_card_tab(\n    nav_panel(\"Result\",\n              uiOutput(\"computed\")\n              ),\n    nav_panel(\"Table\",\n              tableOutput(output = 'mytable')\n              ),\n    nav_panel(\"Graph\",\n              plotOutput(output = 'myplot')\n              )\n  )\n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  # MAKE SELECTIONS TO SETUP TOOL\n  output$select3 <- renderUI({\n    c2 <- input$type2\n    if (c2 == choices2[1]){\n      radioButtons(\"type3\", \"My data is:\", choices3)\n    }\n    else if (c2 == choices2[2]){\n      radioButtons(\"type4\", \"Select one of the following:\", choices4)\n    }\n  })\n  \n  # ENTER REQUIRED DATA FOR INPUT\n  output$requirements <- renderUI({\n    c1 <- input$type1\n    c2 <- input$type2\n    c3 <- input$type3\n    c4 <- input$type4\n\n    # Applicable for All\n    selectors <- tagList(p(\"Enter what you know about your data or desired output:\"))\n    \n    # PAIRED DATA\n    if (c2 == choices2[1] && c3 == choices3[1]){\n      selectors <- tagAppendChild(selectors, tagList(\n        fluidRow(\n          column(width = 6, numericInput(inputId = \"mChange\", \"Mean change:\", value = 4.0, min = 0)),\n          column(width = 6, numericInput(inputId = \"sdChange\", \"Std. Deviation of change:\", value = 4.3, min = 0))\n        )))\n      # COMPUTE POWER\n      if (c1 == choices1[1]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95)),\n            column(width = 6, numericInput(\"myNo\", \"Size of Control and Treatment Groups (Equal):\", min = 0, value = 50))\n          )\n        ))\n      }\n      # COMPUTE SIZE\n      else if (c1 == choices1[2]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95)),\n            column(width = 6, sliderInput(\"beta\", \"Power value \\n (recommended: 0.8):\", min = 0, max = 1, value = 0.8))\n          )\n        ))\n      }\n    }\n    # INDEPENDENT DATA\n    else if (c2 == choices2[1] && c3 == choices3[2]){\n      selectors <- tagAppendChild(selectors, tagList(\n        fluidRow(\n          column(width = 6, numericInput(inputId = \"mChange1\", \"Mean change seen in group A:\", value = 4.0, min = 0)),\n          column(width = 6, numericInput(inputId = \"sdChange1\", \"Std. Deviation seen in group A:\", value = 4.3, min = 0))\n        ),\n        fluidRow(\n          column(width = 6, numericInput(inputId = \"mChange2\", \"Mean change seen in group B:\", value = 4.0, min = 0)),\n          column(width = 6, numericInput(inputId = \"sdChange2\", \"Std. Deviation seen in group B:\", value = 4.3, min = 0))\n        )\n        ))\n      # COMPUTE POWER\n      if (c1 == choices1[1]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95)),\n            column(width = 6, numericInput(\"myNo\", \"Size of Control and Treatment Groups (Equal):\", min = 0, value = 50))\n          )\n        ))\n      }\n      # COMPUTE SIZE\n      else if (c1 == choices1[2]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95)),\n            column(width = 6, sliderInput(\"beta\", \"Power value \\n (recommended: 0.8):\", min = 0, max = 1, value = 0.8))\n          )\n        ))\n      }\n    }\n    # CTRL/TREATMENT\n    else if (c2 == choices2[2] && c4 == choices4[1]){\n      selectors <- tagAppendChild(selectors, tagList(\n        fluidRow(\n          column(width = 6, numericInput(inputId = \"rrControl\", \"Response rate in control group\", value = 0.2, min = 0, max = 1)),\n          column(width = 6, numericInput(inputId = \"rrTreatment\", \"Response rate in treatment group\", value = 0.25, min = 0, max = 1))\n        )))\n      # COMPUTE POWER\n      if (c1 == choices1[1]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n              column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95)),\n              column(width = 6, numericInput(\"myNo\", \"Size of Control and Treatment Groups (Equal):\", min = 0, value = 50))\n          )\n          ))\n      }\n      # COMPUTE SIZE\n      else if (c1 == choices1[2]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95)),\n            column(width = 6, sliderInput(\"beta\", \"Power value \\n (recommended: 0.8):\", min = 0, max = 1, value = 0.8))\n          )\n          ))\n      }\n    }\n    # COHORT POWER\n    else if (c2 == choices2[2] && c4 == choices4[2]){\n      selectors <- tagAppendChild(selectors, tagList(\n        fluidRow(\n          column(width = 6, numericInput(\"ueRatio\", \"Unexposed:Exposed Ratio:\", min = 0, value = 2)),\n          column(width = 6, numericInput(\"riskUe\", \"Risk of Exposure (in Unexposed Population):\", min = 0, max = 1, value = 0.001))\n        ),\n        fluidRow(\n          column(width = 6, numericInput(\"RR\", \"Relative Risk Effect (RR) Value:\", min = 0, value = 1.5)),\n          column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95))\n        )\n      ))\n      # COMPUTE POWER\n      if (c1 == choices1[1]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 12, numericInput(\"myNo\", \"Size of Exposed Population:\", min = 0, value = 1000)),\n          )\n        ))\n      }\n      # COMPUTE SAMPLE SIZE\n      else if(c1 == choices1[2]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 12, sliderInput(\"beta\", \"Power value \\n (recommended: 0.8):\", min = 0, max = 1, value = 0.8))\n        )))      \n      }\n    }\n    # CASE-CONTROL POWER\n    else if (c2 == choices2[2] && c4 == choices4[3]){\n      selectors <- tagAppendChild(selectors, tagList(\n        fluidRow(\n          column(width = 6, numericInput(\"ccRatio\", \"Control:Case Ratio:\", min = 0, value = 4)),\n          column(width = 6, numericInput(\"riskUe\", \"Prevalence of Exposure (in Control Population):\", min = 0, max = 1, value = 0.25))\n        ),\n        fluidRow(\n          column(width = 6, numericInput(\"OR\", \"Odds Ratio (OR) Value:\", min = 0, value = 1.5)),\n          column(width = 6, sliderInput(\"alpha\", \"Confidence level \\n (recommended: 0.95):\", min = 0, max = 1, value = 0.95))\n        )\n      ))\n      # COMPUTE POWER\n      if (c1 == choices1[1]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 12, numericInput(\"myNo\", \"# of Cases:\", min = 0, value = 100)),\n          )\n        ))\n      }\n      # COMPUTE SAMPLE SIZE\n      else if(c1 == choices1[2]){\n        selectors <- tagAppendChild(selectors, tagList(\n          fluidRow(\n            column(width = 12, sliderInput(\"beta\", \"Power value \\n (recommended: 0.8):\", min = 0, max = 1, value = 0.8))\n          )\n        ))      \n      }\n    }\n    \n    selectors\n  })\n  \n  # TABLE OUTPUT\n  outtable <- reactive({\n    c1 <- input$type1\n    c2 <- input$type2\n    c3 <- input$type3\n    c4 <- input$type4\n    \n    # PAIRED SAMPLES\n    if (c2 == choices2[1] && c3 == choices3[1]){\n      m <- input$mChange\n      sd <- input$sdChange\n      a <- input$alpha\n      # TABLE FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        \n        cases <- c(seq(0, myn/2, myn/4), seq(myn, 4*myn, myn/2))\n        trts <- c(m/2, seq(m, 2*m, m/2))\n        ccdf <- data.frame(matrix(ncol = length(trts), nrow = length(cases)))\n        colnames(ccdf) <- trts\n        rownames(ccdf) <- cases\n        \n        c_index <- 1\n        for (i in trts){\n          r_index <- 1\n          for (j in cases){\n            ccdf[r_index, c_index] <- pair_p(j, NA, a, i, sd)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        \n        return(ccdf)\n      }\n      # FOR SAMPLE SIZE\n      if (c1 == choices1[2]){\n        b <- input$beta\n        \n        betas <- seq(0.5, 0.95, 0.05)\n        trts <- c(m/2, seq(m, 2*m, m/2))\n        ccdf <- data.frame(matrix(ncol = length(trts), nrow = length(betas)))\n        colnames(ccdf) <- trts\n        rownames(ccdf) <- betas\n\n        c_index <- 1\n        for (i in trts){\n          r_index <- 1\n          for (j in betas){\n            #print(c(j, a, ctrl, i))\n            #print(prop_n(NULL, j, a, ctrl, i))\n            ccdf[r_index, c_index] <- pair_n(NA, j, a, i, sd)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        \n        return(ccdf)\n      }\n    }\n    # INDEPENDENT SAMPLES\n    else if (c2 == choices2[1] && c3 == choices3[2]){\n      m1 <- input$mChange1\n      sd1 <- input$sdChange1\n      m2 <- input$mChange2\n      sd2 <- input$sdChange2\n      a <- input$alpha\n      # TABLE FOR POWER\n      if (c1 == choices1[1]){\n        \n      }\n      # FOR SAMPLE SIZE\n      if (c1 == choices1[2]){\n        \n      }\n    }\n    # PROPORTION INFO\n    else if (c2 == choices2[2] && c4 == choices4[1]){\n      ctrl <- input$rrControl\n      trt <- input$rrTreatment\n      a <- input$alpha\n      # TABLE FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        \n        cases <- c(seq(0, myn/2, myn/4), seq(myn, 4*myn, myn/2))\n        trts <- c(trt/2, seq(trt, 2*trt, trt/2))\n        ccdf <- data.frame(matrix(ncol = length(trts), nrow = length(cases)))\n        colnames(ccdf) <- trts\n        rownames(ccdf) <- cases\n        \n        c_index <- 1\n        for (i in trts){\n          r_index <- 1\n          for (j in cases){\n            ccdf[r_index, c_index] <- prop_p(j, NA, a, ctrl, i)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        \n        return(ccdf)\n      }\n      # TABLE FOR SAMPLE SIZE\n      else if (c1 == choices1[2]){\n        p <- input$beta\n\n        betas <- seq(0.5, 0.95, 0.05)\n        trts <- c(trt/2, seq(trt, 2*trt, trt/2))\n        ccdf <- data.frame(matrix(ncol = length(trts), nrow = length(betas)))\n        colnames(ccdf) <- trts\n        rownames(ccdf) <- betas\n        \n        c_index <- 1\n        for (i in trts){\n          r_index <- 1\n          for (j in betas){\n            #print(c(j, a, ctrl, i))\n            #print(prop_n(NULL, j, a, ctrl, i))\n            ccdf[r_index, c_index] <- prop_n(NA, j, a, ctrl, i)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        \n        return(ccdf)\n      }\n    }\n    # COHORT\n    else if (c2 == choices2[2] && c4 == choices4[2]){\n      a <- input$alpha\n      uer <- input$ueRatio\n      riu <- input$riskUe\n      myrr <- input$RR\n      \n      # FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n          \n        cases <- c(seq(0, myn/2, myn/4), seq(myn, 4*myn, myn/2))\n        rrs <- c(myrr/2, seq(myrr, 2*myrr, myrr/2))\n        ccdf <- data.frame(matrix(ncol = length(rrs), nrow = length(cases)))\n        colnames(ccdf) <- rrs\n        rownames(ccdf) <- cases\n          \n        c_index <- 1\n        for (i in rrs){\n          r_index <- 1\n          for (j in cases){\n            ccdf[r_index, c_index] <- cohort_p(j, NA, a, uer, riu, i)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        return(ccdf)\n      }\n      # FOR SAMPLE SIZE\n      else if (c1 == choices1[2]){\n        p <- input$beta\n        \n        betas <- seq(0.5, 0.95, 0.05)\n        rrs <- c(myrr/2, seq(myrr, 2*myrr, myrr/2))\n        ccdf <- data.frame(matrix(ncol = length(rrs), nrow = length(betas)))\n        colnames(ccdf) <- rrs\n        rownames(ccdf) <- betas\n        \n        c_index <- 1\n        for (i in rrs){\n          r_index <- 1\n          for (j in betas){\n            ccdf[r_index, c_index] <- cohort_n(NA, j, a, uer, riu, i)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        \n        return(ccdf)\n      }\n    }\n    # CASE-CONTROL\n    else if (c2 == choices2[2] && c4 == choices4[3]){\n      a <- input$alpha\n      uer <- input$ccRatio\n      riu <- input$riskUe\n      myrr <- input$OR\n      \n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        \n        cases <- c(seq(0, myn/2, myn/4), seq(myn, 4*myn, myn/2))\n        rrs <- c(myrr/2, seq(myrr, 2*myrr, myrr/2))\n        ccdf <- data.frame(matrix(ncol = length(rrs), nrow = length(cases)))\n        colnames(ccdf) <- rrs\n        rownames(ccdf) <- cases\n        \n        c_index <- 1\n        for (i in rrs){\n          r_index <- 1\n          for (j in cases){\n            ccdf[r_index, c_index] <- case_p(j, NA, a, uer, riu, i)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        return(ccdf)\n      }\n      else if (c1 == choices1[2]){\n        p <- input$beta\n        \n        betas <- seq(0.5, 0.95, 0.05)\n        rrs <- c(myrr/2, seq(myrr, 2*myrr, myrr/2))\n        ccdf <- data.frame(matrix(ncol = length(rrs), nrow = length(betas)))\n        colnames(ccdf) <- rrs\n        rownames(ccdf) <- betas\n        \n        c_index <- 1\n        for (i in rrs){\n          r_index <- 1\n          for (j in betas){\n            ccdf[r_index, c_index] <- case_n(NA, j, a, uer, riu, i)\n            r_index <- r_index + 1\n          }\n          c_index <- c_index + 1\n        }\n        \n        return(ccdf)\n      }\n    }\n    else{ccdf <- matrix(nrow = NULL, ncol = NULL)}\n    ccdf\n  })\n  \n  # GET TABLE\n  output$mytable <- renderTable({\n    outtable()\n  }, rownames = TRUE)\n  \n  # PLOT OUTPUT\n  output$myplot <- renderPlot({\n    c1 <- input$type1\n    c2 <- input$type2\n    c3 <- input$type3\n    c4 <- input$type4\n    \n    if (c1 == choices1[1]){\n      plotdata <- adj_table(outtable())\n      #print(plotdata)\n      outplot <- ggplot(plotdata, aes(y = val, x = max, group = variable, colour = variable)) + geom_vline(xintercept = input$myNo, colour = \"black\")\n      outplot <- outplot + geom_line() + geom_point() + theme_minimal()\n      return(outplot)\n    }\n    \n    else if (c1 == choices1[2]){\n      plotdata <- adj_table(outtable())\n      #print(plotdata)\n      outplot <- ggplot(plotdata, aes(x = val, y = max, group = variable, colour = variable)) + geom_hline(yintercept = input$beta, colour = \"black\")\n      outplot <- outplot + geom_line() + geom_point() + theme_minimal()\n      return(outplot)\n    }\n    \n  })\n  \n  # TEXT OUTPUT\n  output$computed <- renderUI({\n    c1 <- input$type1\n    c2 <- input$type2\n    c3 <- input$type3\n    c4 <- input$type4\n    \n    # PAIRED DATA\n    if (c2 == choices2[1] && c3 == choices3[1]){\n      m <- input$mChange\n      sd <- input$sdChange\n      a <- input$alpha\n      # TABLE FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        pval <- pair_p(myn, NA, a, m, sd)\n        return(p(paste(\"The power of this test is\", pval)))\n      }\n      # FOR SAMPLE SIZE\n      if (c1 == choices1[2]){\n        b <- input$beta\n        ncase <- pair_n(NA, b, a, m, sd)\n        return(p(paste(\"At least\",ceiling(ncase),\"cases are required to satisfy the chosen inputs.\")))\n      }\n    }\n    # INDEPENDENT DATA\n    else if (c2 == choices2[1] && c3 == choices3[2]){\n      m1 <- as.numeric(input$mChange1)\n      sd1 <- as.numeric(input$sdChange1)\n      m2 <- as.numeric(input$mChange2)\n      sd2 <- as.numeric(input$sdChange2)\n      \n      sd <- round(mean(c(sd1, sd2)), 1)\n      m <- round(mean(c(m1, m2)), 1)\n      \n      a <- input$alpha\n      \n      # TABLE FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        pval <- pair_p(myn, NA, a, m, sd)\n        return(p(paste(\"The power of this test is\", pval)))\n      }\n      # FOR SAMPLE SIZE\n      if (c1 == choices1[2]){\n        b <- input$beta\n        ncase <- pair_n(NA, b, a, m, sd)\n        return(p(paste(\"At least\",ceiling(ncase),\"cases are required to satisfy the chosen inputs.\")))\n      }\n    }\n    # PROPORTION DATA\n    else if (c2 == choices2[2] && c4 == choices4[1]){\n      a <- input$alpha\n      ctrl <- input$rrControl\n      trt <- input$rrTreatment\n      # FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        pval <- prop_p(myn, NA, a, ctrl, trt)\n        return(p(paste(\"The power of this test is\", pval)))\n      }\n      # FOR SS\n      else if (c1 == choices1[2]){\n        p <- input$beta\n        ncase <- prop_n(NA, p, a, ctrl, trt)\n        return(p(paste(\"At least\",ceiling(ncase),\"subjects in the control and treatment groups are required to satisfy the chosen inputs.\")))\n      }\n    }\n    # COHORT DATA\n    else if (c2 == choices2[2] && c4 == choices4[2]){\n      a <- input$alpha\n      uer <- input$ueRatio\n      riu <- input$riskUe\n      myrr <- input$RR\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        pval <- cohort_p(myn, NA, a, uer, riu, myrr)\n        return(p(paste(\"The power of this test is\", pval)))\n      }\n      else if (c1 == choices1[2]){\n        p <- input$beta\n        ncase <- cohort_n(NA, p, a, uer, riu, myrr)\n        return(p(paste(\"At least\",ceiling(ncase),\"exposed subjects are required to satisfy the chosen inputs.\")))\n      }\n    }\n    # CASE-CONTROL DATA\n    else if (c2 == choices2[2] && c4 == choices4[3]){\n      a <- input$alpha\n      uer <- input$ccRatio\n      riu <- input$riskUe\n      myrr <- input$OR\n      # FOR POWER\n      if (c1 == choices1[1]){\n        myn <- input$myNo\n        pval <- case_p(myn, NA, a, uer, riu, myrr)\n        return(p(paste(\"The power of this test is\", pval)))\n      }\n      # FOR SAMPLE\n      else if (c1 == choices1[2]){\n        p <- input$beta\n        ncase <- case_n(NA, p, a, uer, riu, myrr)\n        return(p(paste(\"At least\",ceiling(ncase),\"cases are required to satisfy the chosen inputs.\")))\n      }\n    }\n  })\n}\n\n# Run the application \n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
